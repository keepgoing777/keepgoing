 -- 1. 직급이 대리이면서 ASIA 지역에서 근무하는 직원들의 사번, 직원명, 직급명, 부서명, 근무지역, 급여 조회
SELECT * FROM EMPLOYEE; // DEPT_CODE, JOB_CODE, SALARY
SELECT * FROM LOCATION; //LOCAL_CODE, LOCAL_NAME
SELECT * FROM JOB; // JOB_CODE, JOB_NAME
SELECT * FROM DEPARTMENT; //LOCATION_ID(L1,L2,L3) 
SELECT * FROM SAL_GRADE;

SELECT 
    EMP_ID, EMP_NAME, JOB_NAME, DEPT_TITLE, LOCAL_NAME, SALARY
FROM EMPLOYEE
  LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
  LEFT JOIN JOB USING (JOB_CODE)
  LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE JOB_NAME = '대리' AND LOCAL_NAME LIKE 'ASIA%';
  
-- 2. 70년대생 이면서 여자이고, 성이 전씨인 직원들의 직원명, 주민번호, 부서명, 직급명 조회
SELECT * FROM EMPLOYEE; // 
SELECT EMP_NAME, EMP_NO, DEPT_CODE, JOB_CODE
FROM EMPLOYEE
  JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
  JOIN JOB USING (JOB_CODE)
 WHERE EMP_NO LIKE '7_____-2%' AND EMP_NAME LIKE '전%';
  
-- 3. 보너스를 받는 직원들의 직원명, 보너스, 연봉, 부서명, 근무지역 조회 (단, 부서 배치 안된 사원들도 출력)
SELECT EMP_NAME, BONUS, SALARY*12, DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE
  LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
  LEFT JOIN LOCATION ON (LOCAL_CODE = LOCATION_ID)
WHERE BONUS IS NOT NULL;

-- 4. 각 부서별 평균 급여를 조회하여 부서명, 평균 급여 조회 (단, 부서 배치 안된 사원들의 평균도 같이)
SELECT NVL(DEPT_TITLE, '부서없음') 부서,
       TO_CHAR(ROUND(AVG(SALARY)), '999,999,999') 평균급여,
FROM EMPLOYEE
       LEFT JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
GROUP BY DEPT_TITLE;


-- 5. 각 부서별 총 급여의 합이 1000만원 이상인 부서명, 급여의 합 조회
SELECT DEPT_TITLE, SUM(SALARY)
FROM EMPLOYEE
  JOIN DEPARTMENT ON (DEPT_ID = DEPT_CODE)
GROUP BY DEPT_TITLE
HAVING SUM(SALARY) >= 10000000;

-- 6. 사번, 직원명, 직급명, 급여 등급, 구분 조회
-- 이때 구분은 급여 등급이 S1, S2인 경우 '고급', S3, S4인 경우 '중급', S5, S6인 경우 '초급'

SELECT EMP_NO, EMP_NAME, JOB_NAME, SAL_LEVEL,
       CASE WHEN SAL_LEVEL IN ('S1', 'S2') THEN '고급'
            WHEN SAL_LEVEL IN ('S3', 'S4') THEN '중급'
            WHEN SAL_LEVEL IN ('S5', 'S6') THEN '초급'
       END AS 구분
FROM EMPLOYEE
  JOIN JOB USING(JOB_CODE)
  JOIN SAL_GRADE ON (SALARY BETWEEN MIN_SAL AND MAX_SAL);

-- 7. 보너스를 받지 않는 직원들 중 직급 코드가 J4 또는 J7인 직원들의 직원명, 직급명, 급여 조회
SELECT EMP_NAME, JOB_NAME, SALARY
FROM EMPLOYEE
  JOIN JOB USING (JOB_CODE)
WHERE BONUS IS NULL AND JOB_CODE IN ('J4','J7');


-- 8. 부서가 있는 직원들의 직원명, 직급명, 부서명, 근무 지역 조회
SELECT EMP_NAME, JOB_NAME, JOB_NAME , DEPT_TITLE, LOCAL_NAME
FROM EMPLOYEE 
   JOIN JOB USING (JOB_CODE)
   JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
   JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE);

-- 9. 해외영업팀에 근무하는 직원들의 직원명, 직급명, 부서코드, 부서명 조회
SELECT EMP_NAME, JOB_NAME, DEPT_CODE, DEPT_TITLE
FROM EMPLOYEE 
   JOIN JOB USING (JOB_CODE)
   JOIN DEPARTMENT ON (DEPT_CODE = DEPT_ID)
   JOIN LOCATION ON (LOCATION_ID = LOCAL_CODE)
WHERE DEPT_TITLE LIKE '해외영업%';


-- 10. 이름에 '형'자가 들어있는 직원들의 사번, 직원명, 직급명 조회
SELECT EMP_ID, EMP_NAME, JOB_NAME
FROM EMPLOYEE 
  LEFT JOIN JOB USING (JOB_CODE)
WHERE EMP_NAME LIKE '%형%';
  

-- 테이블 : USER_INFO, REVIEW, MOVIE, ACTOR, MOVIE_ACTOR
-- 11. 영화 제목, 감독, 출연한 배우 조회
SELECT TITLE, DIRECTOR, NAME, ACTOR_ID, MOVIE_ID
FROM MOVIE_ACTOR
  JOIN MOVIE USING(MOVIE_ID)
  JOIN ACTOR USING(ACTOR_ID);

-- 12. 평점이 3점 이상인 리뷰 영화 제목과 사용자 이름, 평점 조회
SELECT TITLE, NAME, RATING
FROM REVIEW
  JOIN USER_INFO USING(USER_ID)
  JOIN MOVIE USING(MOVIE_ID)
WHERE RATING>=3;


-- 13. 사용자별 리뷰 수 조회
SELECT NAME, COUNT(*)
FROM REVIEW
  JOIN USER_INFO USING(USER_ID)
GROUP BY NAME;

-- 14. 최동훈 감독의 영화에 출연한 배우 조회
SELECT DISTINCT NAME
FROM MOVIE_ACTOR 
   JOIN MOVIE USING(MOVIE_ID)
   JOIN ACTOR USING(ACTOR_ID)
WHERE DIRECTOR = '최동훈';

-- 15. 하정우가 출연한 영화 제목과 평균 평점 조회
SELECT TITLE, AVG(RATING)
FROM MOVIE
  JOIN REVIEW USING(MOVIE_ID)
  JOIN MOVIE_ACTOR USING(MOVIE_ID)
  JOIN ACTOR USING(ACTOR_ID)
WHERE NAME = '하정우'
GROUP BY TITLE;

-- 16. MBTI별 평균 평점 조회
SELECT MBTI,ROUND((AVG(RATING)),2)
FROM REVIEW
   JOIN USER_INFO USING(USER_ID)
GROUP BY MBTI;


-- 17. 각 영화별 리뷰 수와 평균 평점 조회 (리뷰 수가 1건이라도 있는 경우부터)
SELECT TITLE, COUNT("COMMENT"), ROUND(AVG(RATING),2)
FROM REVIEW 
   JOIN MOVIE USING(MOVIE_ID)
GROUP BY TITLE
HAVING COUNT("COMMENT") >= 1;


-- 18. 각 배우가 출연한 영화 수 조회 (단, 3편 이상인 배우만)
SELECT NAME, COUNT(MOVIE_ID)
FROM MOVIE_ACTOR
   JOIN MOVIE USING(MOVIE_ID)
   JOIN ACTOR USING(ACTOR_ID)
GROUP BY NAME
HAVING COUNT(MOVIE_ID) >= 3; 

-- 1. 국제시장을 감독한 감독의 다른 영화 조회
SELECT * FROM ACTOR; ACTOR_ID, NAME
SELECT * FROM MOVIE; MOVIE_ID, TITLE, DIRECTOR
SELECT * FROM MOVIE_ACTOR; MOVIE_ID, ACTOR_ID
SELECT * FROM REVIEW; REVIEW_ID, MOVIE_ID, USER_ID, RATING
SELECT * FROM USER_INFO; USER_ID, ADDRESS

SELECT TITLE
FROM MOVIE
WHERE DIRECTOR = (SELECT DIRECTOR
                  FROM MOVIE
                  WHERE TITLE = '국제시장')
AND TITLE != '국제시장';

/*SELECT DIRECTOR
FROM MOVIE
WHERE TITLE = '국제시장';
DIRECTOR = '윤제균'
*/

-- 2. 서울에 사는 사용자들이 리뷰를 남긴 영화 조회
SELECT * FROM REVIEW; REVIEW_ID, USER_ID MOVIE_ID
SELECT * FROM USER_INFO; USER_ID ADDRESS %서울%
SELECT * FROM MOVIE;

SELECT DISTINCT TITLE
FROM USER_INFO
   JOIN REVIEW USING(USER_ID)
   JOIN MOVIE USING(MOVIE_ID)
WHERE ADDRESS LIKE '서울%';

/*서브쿼리 답 
SELECT DISTINCT TITLE 
FROM REVIEW
 JOIN MOVIE USING(MOVIE_ID)
WHERE USER_ID IN (SELECT USER_ID FROM USER_INFO WHERE ADDRESS LIKE '서울%');
*/
/*JOIN 답
SELECT DISTINCT TITLE
FROM REVIEW
  JOIN MOVIE USING(MOVIE_ID)
  JOIN USER_INFO USING(USER_ID)
WHERE ADRESS LIKE '서울%';
*/
-- 3. 봉준호 감독 영화 중 평균 평점이 3.0인 영화 조회
SELECT * FROM ACTOR; ACTOR_ID, NAME
SELECT * FROM MOVIE; MOVIE_ID, TITLE, DIRECTOR
SELECT * FROM MOVIE_ACTOR; MOVIE_ID, ACTOR_ID
SELECT * FROM REVIEW; REVIEW_ID, MOVIE_ID, USER_ID, RATING
SELECT * FROM USER_INFO; USER_ID, ADDRESS

SELECT MOVIE_ID FROM MOVIE WHERE DIRECTOR = '봉준호';

/* 서브쿼리 답
SELECT TITLE, AVG(RATING)
FROM REVIEW
 JOIN MOVIE USING(MOVIE_ID)
WHERE MOVIE_ID IN (SELECT MOVIE_ID FROM MOVIE WHERE DIRECTOR = '봉준호')
GROUP BY TITLE
HAVING AVG(RATING)>=3;

SELECT * FROM MOVIE; DIRECTOR = '봉준호' 
SELECT * FROM REVIEW; RATING 
*/

/* JOIN 답
SELECT TITLE
FROM REVIEW 
  JOIN MOVIE USING(MOVIE_ID)
  WHERE DIRECTOR = '봉준호'
  GROUP BY TITLE 
  HAVING AVG(RATING) >= 3;
*/
  
SELECT AVG(RATING)
FROM REVIEW
WHERE MOVIE_ID = (SELECT MOVIE_ID
FROM MOVIE
WHERE DIRECTOR = '봉준호');

-- 4. 가장 리뷰 수가 많은 영화 조회
SELECT * FROM REVIEW;
SELECT * FROM MOVIE;

SELECT TITLE, COUNT(REVIEW_ID)
FROM REVIEW
 JOIN MOVIE USING(MOVIE_ID)
 GROUP BY TITLE
 ORDER BY COUNT(REVIEW_ID) DESC;
-- 타이틀별 리뷰 수 

SELECT TITLE
FROM (SELECT TITLE, COUNT(REVIEW_ID)
FROM REVIEW
 JOIN MOVIE USING(MOVIE_ID)
 GROUP BY TITLE
 ORDER BY COUNT(REVIEW_ID) DESC)
 WHERE ROWNUM = 1;
--FROM 절 안에 모두 넣고 ROWNUM 사용하기
 

SELECT TITLE,
        COUNT(REVIEW_ID),
        DENSE_RANK() OVER(ORDER BY COUNT(REVIEW_ID) DESC)
FROM REVIEW
    JOIN MOVIE USING(MOVIE_ID)
GROUP BY TITLE;

 
SELECT TITLE
FROM (SELECT TITLE,
        COUNT(REVIEW_ID),
        DENSE_RANK() OVER(ORDER BY COUNT(REVIEW_ID) DESC) RANK
        FROM REVIEW
            JOIN MOVIE USING(MOVIE_ID)
        GROUP BY TITLE)
WHERE RANK = 2;

-- 5. 전체 리뷰 평균 평점보다 높은 순으로 3위까지 영화 조회

SELECT AVG(RATING)
FROM REVIEW; //3.2
 
--확인필요
SELECT AVG(RATING)
FROM REVIEW;

SELECT TITLE
FROM (SELECT TITLE,
             AVG(RATING),
             DENSE_RANK() OVER(ORDER BY AVG(RATING) DESC) RANK
             FROM REVIEW
             JOIN MOVIE USING(MOVIE_ID)
             GROUP BY TITLE
             HAVING AVG(RATING) > (SELECT AVG(RATING)
             FROM REVIEW))
WHERE RANK <= 3;

